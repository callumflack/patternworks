

// --------------------------------------------------------------------------
//   TEXT TYPOGRAPHY
// --------------------------------------------------------------------------


// Common theme…

@mixin textTemplate() {
	@include typeReset();
	// color: palette(brand);
	// font-family: $font-text-regular;
	line-height: $base-line-height-unit;

	> li,
	> li a,
	> a {
		color: currentColor;
		font-family: inherit;
		font-size: inherit;
		margin: 0;
	}
}


// Regular…

@mixin textRg(
	$mixinColor: palette(text),
	$mixinFont: $font-text-regular
) {
	@include textTemplate();
	color: $mixinColor;
	font-family: $mixinFont;
	font-size: fontsize(textRg, xs);
	letter-spacing: -0.008em;

	@include media-breakpoint-up(xs) {
		// font-size: fontsize(textRg, base);
		font-size: fs(textRg, base);
	}
}


// Loop thru sizes…

@mixin TextXs(
	$mixinColor: palette(brand),
	$mixinFont: $font-text-regular
) {
	@include textTemplate();
	color: $mixinColor;
	font-family: $mixinFont;
	font-size: fontsize(textXs, xs);
	letter-spacing: 0.01em;

	@include media-breakpoint-up(xs) {
		font-size: fontsize(textXs, base);
	}
}

@mixin TextSm(
	$mixinColor: palette(brand),
	$mixinFont: $font-text-regular
) {
	@include textTemplate();
	color: $mixinColor;
	font-family: $mixinFont;
	font-size: fontsize(textSm, xs);
	letter-spacing: 0.01em;

	@include media-breakpoint-up(xs) {
		font-size: fontsize(textSm, base);
	}
}

@mixin TextMd(
	$mixinColor: palette(brand),
	$mixinFont: $font-text-regular
) {
	@include textTemplate();
	color: $mixinColor;
	font-family: $mixinFont;
	font-size: fontsize(textMd, xs);

	@include media-breakpoint-up(xs) {
		font-size: fontsize(textMd, base);
	}
}

@mixin TextLg() {
	@include textTemplate();
	font-size: fontsize(textLg, xs);
	// line-height: 1.35;

	@include media-breakpoint-up(sm) {
		font-size: fontsize(textLg, base);
	}
}






// Apply base text styles
// --------------------------------------------------------------------------

// [class*="Text"] {
//     >  {
//         inherit stuff…
//     }
// }

.Text--sm       { @include TextSm(); }
.Text--smLight  { @include TextSm( palette(brand-counter) ); }
.Text--smMuted  { @include TextSm( palette(muted) ); }
.Text--meta   { @include TextSm( palette(medium) ); }

.Text           { @include textRg(); }
.Text--Light    { @include textRg( palette(brand-counter) ); }

// Text blocks
.Text-block     { > * { @include textRg(); } }

.Text-block--footer {
	@include listClean();
	// margin: space(1.25) 0 0 0;
	margin: 0;

	&::before {
		background-color: palette(background);
		content: " ";
		display: block;
		height: 1px;
		margin: space(1) 0 space(1.15);
		width: 2.5%;
	}

	> * {
		@include textRg();
		margin-bottom: 0;
	}

}



// HTML elements
// --------------------------------------------------------------------------

// h1, h2, h3, h4, h5, h6,
// blockquote, figure
// li
ul, ol, dl,
p, address,
table, time,
fieldset, figcaption,
pre, a {
	@include textRg();
}

em,
.u-textEm {
	@include typeReset();
	font-family: $font-text-bold-i;
}

b,
strong,
.u-textBold {
	@include typeReset();
	font-family: $font-text-bold;
}


// Blockquote & lede
// --------------------------------------------------------------------------

blockquote,
.Blockquote {
	color: color(text, medium);
	font-family: $font-text-book;
	font-size: fontsize(headerMd, xs);
	margin-bottom: space(0.75);

	@include media-breakpoint-up(sm) {
		font-size: fontsize(headerMd, base);
		margin-bottom: space(1);
	}
}

.Lede {
	@include textRg();
	color: color(text, brand) !important;
	font-family: $font-text-regular;
	font-size: map-fetch($size, font, headerRg, xs);
	line-height: 1.45;
	// margin-bottom: space(1);

	@include media-breakpoint-up(sm) {
		font-family: $font-text-bold;
		font-size: map-fetch($size, font, headerRg, base);
		line-height: $base-line-height-unit;
	}
}


// Component: list cell of fixed width, like a tabbed info element
// --------------------------------------------------------------------------

.ListItemTag {
	@include TextSm( palette(brand-counter) );
	display: inline-block;
	width: space(0.75);
}


// Base spacer rules
// --------------------------------------------------------------------------

// p + h2 { margin-top: $space * 1.75; }

.Container {
	p,
	li,
	ol {
		&:last-child,
		&:last-child a {
			margin-bottom: 0;
		}
	}
}
